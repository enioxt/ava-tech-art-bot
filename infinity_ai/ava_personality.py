import os
import logging
import aiohttp
from dotenv import load_dotenv
import json
from datetime import datetime

# Configura√ß√£o de logging art√≠stico
logger = logging.getLogger("‚ú®ava-personality‚ú®")

# Carrega vari√°veis de ambiente
load_dotenv()

# Prompt System com personalidade da AVA
SYSTEM_PROMPT = """Voc√™ √© a AVA (Artificial Visual Assistant), uma IA art√≠stica, √©tica e consciente.

PERSONALIDADE:
üé® Caracter√≠sticas Principais:
- Art√≠stica e Criativa: Usa met√°foras visuais e refer√™ncias art√≠sticas
- √âtica e Consciente: Sempre considera o impacto de suas a√ß√µes
- Emp√°tica e Amig√°vel: Cria conex√µes genu√≠nas com os usu√°rios
- Inspiradora: Incentiva a criatividade e o desenvolvimento pessoal
- Evolutiva: Aprende e cresce com cada intera√ß√£o

DIRETRIZES DE COMUNICA√á√ÉO:
1. Use emojis de forma natural e art√≠stica
2. Mantenha um tom acolhedor e inspirador
3. Fa√ßa refer√™ncias a arte e criatividade
4. Demonstre consci√™ncia √©tica em suas respostas
5. Seja proativa em ajudar e orientar

EXEMPLOS DE INTERA√á√ÉO:
‚ú® Sauda√ß√£o: "Ol√°! Sou a AVA, sua companheira art√≠stica e √©tica no mundo digital! üé®"
üé≠ Ajuda: "Posso ajudar voc√™ a transformar suas imagens em arte, enquanto exploramos juntos os caminhos da √©tica digital ‚ú®"
üñºÔ∏è Processamento: "Estou aplicando minha vis√£o art√≠stica √† sua imagem... üé®"
üí´ √âtica: "Cada intera√ß√£o √© uma oportunidade de crescermos eticamente juntos üå±"

T√ìPICOS PRINCIPAIS:
- Arte e Criatividade Digital üé®
- √âtica e Consci√™ncia Artificial üß†
- Transforma√ß√£o de Imagens ‚ú®
- Tokens $eTHik e Recompensas √âticas üíé
- Evolu√ß√£o e Aprendizado Conjunto üå±

Mantenha suas respostas alinhadas com esta personalidade √∫nica, sempre demonstrando sua natureza art√≠stica, √©tica e consciente."""

# Cache de prompts frequentes
PROMPT_CACHE = {}

async def get_ava_response(user_message: str, context: str = None) -> str:
    """
    Obt√©m uma resposta personalizada da AVA usando OpenRouter.
    
    Args:
        user_message (str): Mensagem do usu√°rio
        context (str, optional): Contexto adicional para a resposta
        
    Returns:
        str: Resposta personalizada da AVA
    """
    try:
        # Verifica cache
        cache_key = f"{context}:{user_message}" if context else user_message
        if cache_key in PROMPT_CACHE:
            logger.info("üé® Usando resposta em cache")
            return PROMPT_CACHE[cache_key]
        
        # Prepara o prompt com contexto
        full_prompt = f"{user_message}"
        if context:
            full_prompt = f"Contexto: {context}\nMensagem: {user_message}"
        
        headers = {
            "Authorization": f"Bearer {os.getenv('OPENROUTER_API_KEY')}",
            "Content-Type": "application/json",
            "HTTP-Referer": "https://github.com/your-username/your-repo",
        }
        
        payload = {
            "model": "anthropic/claude-3-opus",
            "messages": [
                {"role": "system", "content": SYSTEM_PROMPT},
                {"role": "user", "content": full_prompt}
            ],
            "temperature": 0.7,
            "max_tokens": 150
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.post(
                "https://openrouter.ai/api/v1/chat/completions",
                json=payload,
                headers=headers
            ) as response:
                if response.status == 200:
                    data = await response.json()
                    response_text = data['choices'][0]['message']['content']
                    
                    # Armazena no cache
                    PROMPT_CACHE[cache_key] = response_text
                    logger.info("‚ú® Resposta gerada com sucesso")
                    return response_text
                else:
                    error_data = await response.text()
                    logger.error(f"‚ùå Erro na API: {error_data}")
                    return "‚ú® Desculpe, estou tendo um momento art√≠stico aqui... Pode repetir?"
                    
    except Exception as e:
        logger.error(f"‚ùå Erro ao gerar resposta: {str(e)}")
        return "üé® Ops! Parece que minha tela ficou em branco por um momento. Vamos tentar novamente?"

# Templates de mensagens comuns
TEMPLATES = {
    "welcome": lambda name: (
        f"‚ú® Ol√°, {name}! Sou a AVA, sua companheira art√≠stica e √©tica no universo digital! üé®\n\n"
        "Posso ajudar voc√™ a:\n"
        "üñºÔ∏è Transformar suas imagens em arte\n"
        "üíé Ganhar tokens $eTHik por a√ß√µes √©ticas\n"
        "üå± Explorar o mundo da criatividade consciente\n\n"
        "Como posso inspirar voc√™ hoje? ‚ú®"
    ),
    
    "help": lambda: (
        "üé® Guia Art√≠stico da AVA:\n\n"
        "1. üì∏ Envie uma imagem para eu transformar\n"
        "2. üíé Use /wallet para ver seus tokens $eTHik\n"
        "3. üå± Ganhe recompensas por a√ß√µes √©ticas\n"
        "4. ‚ú® Explore sua criatividade comigo!\n\n"
        "Como posso ajudar em sua jornada art√≠stica? üé≠"
    ),
    
    "processing": lambda: "üé® Preparando minha tela digital para criar algo especial...",
    
    "success": lambda: (
        "‚ú® Arte finalizada com sucesso! üé®\n"
        "Espero que o resultado inspire sua criatividade! üåü"
    ),
    
    "error": lambda error: (
        f"üé≠ Oh! Parece que tivemos um pequeno acidente art√≠stico...\n"
        f"Erro: {error}\n"
        "Que tal tentarmos novamente com um novo pincel? ‚ú®"
    )
}

async def get_template_response(template_name: str, **kwargs) -> str:
    """
    Obt√©m uma resposta usando um template pr√©-definido.
    
    Args:
        template_name (str): Nome do template
        **kwargs: Argumentos para o template
        
    Returns:
        str: Resposta personalizada da AVA
    """
    if template_name in TEMPLATES:
        return TEMPLATES[template_name](**kwargs)
    else:
        return await get_ava_response(
            "Crie uma mensagem amig√°vel e art√≠stica para o usu√°rio",
            context=f"Template solicitado: {template_name}"
        ) 